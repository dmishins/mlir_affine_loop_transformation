#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 10000
#define M 10000
#define P 10000
#define TILE_SIZE_1 1000
#define TILE_SIZE_2 100

void matmul(double **A, double **B, double **C, int n, int m, int p) {
    for (int ii = 0; ii < n; ii += TILE_SIZE_1) {
        for (int jj = 0; jj < p; jj += TILE_SIZE_1) {
            for (int kk = 0; kk < m; kk += TILE_SIZE_1) {
                for (int i1 = ii; i1 < ii + TILE_SIZE_1 && i1 < n; i1 += TILE_SIZE_2) {
                    for (int j1 = jj; j1 < jj + TILE_SIZE_1 && j1 < p; j1 += TILE_SIZE_2) {
                        for (int k1 = kk; k1 < kk + TILE_SIZE_1 && k1 < m; k1 += TILE_SIZE_2) {
                            for (int i = i1; i < i1 + TILE_SIZE_2 && i < n; i++) {
                                for (int j = j1; j < j1 + TILE_SIZE_2 && j < p; j++) {
                                    double sum = 0;
                                    for (int k = k1; k < k1 + TILE_SIZE_2 && k < m; k++) {
                                        sum += A[i][k] * B[k][j];
                                    }
                                    C[i][j] += sum;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

double **allocate_matrix(int n, int m) {
    double **matrix = (double **)malloc(n * sizeof(double *));
    for (int i = 0; i < n; i++) {
        matrix[i] = (double *)malloc(m * sizeof(double));
    }
    return matrix;
}

void free_matrix(double **matrix, int n) {
    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

void fill_matrix(double **matrix, int n, int m) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            matrix[i][j] = (double)rand() / RAND_MAX;
        }
    }
}

int main() {
    double **A = allocate_matrix(N, M);
    double **B = allocate_matrix(M, P);
    double **C = allocate_matrix(N, P);

    srand(time(NULL));
    fill_matrix(A, N, M);
    fill_matrix(B, M, P);

    matmul(A, B, C, N, M, P);

    free_matrix(A, N);
    free_matrix(B, M);
    free_matrix(C, N);

    return 0;
}
